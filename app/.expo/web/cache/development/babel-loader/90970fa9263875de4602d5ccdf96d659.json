{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar shownWarnings = [];\nvar validations = _objectSpread({\n  transparentCard: {\n    message: \"'transparentCard' is removed in favor of 'cardStyle: { backgroundColor: 'transparent' }' in 'navigationOptions'. Specify it in 'defaultNavigationOptions' to keep the same behaviour.\",\n    compat: function compat(c, o) {\n      return c.transparentCard ? _objectSpread({}, o, {\n        cardStyle: [{\n          backgroundColor: 'transparent'\n        }, o.cardStyle]\n      }) : o;\n    }\n  },\n  headerLayoutPreset: {\n    message: \"'headerLayoutPreset' is renamed to 'headerTitleAlign' and moved to 'navigationOptions'. Specify it in 'defaultNavigationOptions' to keep the same behaviour.\",\n    compat: function compat(c, o) {\n      return _objectSpread({}, o, {\n        headerTitleAlign: c.headerLayoutPreset\n      });\n    }\n  },\n  headerTransitionPreset: {\n    message: \"'headerTransitionPreset' is removed in favor of the new animation APIs\"\n  },\n  transitionConfig: {\n    message: \"'transitionConfig' is removed in favor of the new animation APIs\"\n  }\n}, ['cardShadowEnabled', 'cardOverlayEnabled', 'cardStyle', 'headerBackTitleVisible', 'onTransitionStart', 'onTransitionEnd'].reduce(function (acc, name) {\n  acc[name] = {\n    message: \"'\".concat(name, \"' is moved to 'navigationOptions'. Specify it in 'defaultNavigationOptions' to keep the same behaviour.\"),\n    compat: function compat(c, o) {\n      return _objectSpread({}, o, _defineProperty2({}, name, function () {\n        return c[name];\n      }));\n    }\n  };\n  return acc;\n}, {}));\nexport default function validateDeprecatedConfig(config, options) {\n  var result = options;\n  Object.keys(validations).forEach(function (name) {\n    if (name in config) {\n      var _validations$name = validations[name],\n        compat = _validations$name.compat,\n        message = _validations$name.message;\n      result = compat ? compat(config, result) : result;\n      if (process.env.NODE_ENV !== 'production') {\n        if (shownWarnings.includes(message)) {\n          return;\n        }\n        console.warn(\"Deprecation in 'createStackNavigator':\\n\".concat(message));\n        shownWarnings.push(message);\n      }\n    }\n  });\n  return result;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA,IAAMA,aAAuB,GAAG,EAAhC;AAEA,IAAMC,WAAuC;EAC3CC,eAAe,EAAE;IACfC,OAAO,yLADQ;IAEfC,MAAM,EAAE,gBAACC,CAAD,EAAIC,CAAJ;MAAA,OACND,CAAC,CAACH,eAAF,qBAESI,CAFT;QAGMC,SAAS,EAAE,CACT;UAAEC,eAAe,EAAE;QAAnB,CADS,EAETF,CAAC,CAACC,SAFO;MAHjB,KAQID;IAAAA;EAXS,CAD0B;EAc3CG,kBAAkB,EAAE;IAClBN,OAAO,gKADW;IAElBC,MAAM,EAAE,gBAACC,CAAD,EAAIC,CAAJ;MAAA,yBAAgBA,CAAhB;QAAmBI,gBAAgB,EAAEL,CAAC,CAACI;MAAvC;IAAA;EAFU,CAduB;EAkB3CE,sBAAsB,EAAE;IACtBR,OAAO;EADe,CAlBmB;EAqB3CS,gBAAgB,EAAE;IAChBT,OAAO;EADS;AArByB,GAwBxC,CACD,mBADC,EAED,oBAFC,EAGD,WAHC,EAID,wBAJC,EAKD,mBALC,EAMD,iBANC,EAODU,MAPC,CAOkC,UAACC,GAAD,EAAMC,IAAN,EAAe;EAClDD,GAAG,CAACC,IAAD,CAAH,GAAY;IACVZ,OAAO,aAAMY,IAAN,4GADG;IAEVX,MAAM,EAAE,gBAACC,CAAD,EAAIC,CAAJ;MAAA,yBAAgBA,CAAhB,uBAAoBS,IAAD,EAAQ;QAAA,OAAMV,CAAC,CAACU,IAAD;MAAA,GAAlC;IAAA;EAFE,CAAZ;EAKA,OAAOD,GAAP;AACD,CAdE,EAcA,EAdA,CAxBwC,CAA7C;AAyCA,eAAe,SAASE,wBAAT,CACbC,MADa,EAEbC,OAFa,EAGb;EACA,IAAIC,MAAM,GAAGD,OAAb;EAEAE,MAAM,CAACC,IAAP,CAAYpB,WAAZ,EAAyBqB,OAAzB,CAAkCP,cAAD,EAAU;IACzC,IAAIA,IAAI,IAAIE,MAAZ,EAAoB;MAClB,wBAA4BhB,WAAW,CAACc,IAAD,CAAvC;QAAQX,MAAF,qBAAEA,MAAF;QAAUD;MAEhBgB,MAAM,GAAGf,MAAM,GAAGA,MAAM,CAACa,MAAD,EAASE,MAAT,CAAT,GAA4BA,MAA3C;MAEA,IAAII,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;QACzC,IAAIzB,aAAa,CAAC0B,QAAd,CAAuBvB,OAAvB,CAAJ,EAAqC;UACnC;QACD;QAEDwB,OAAO,CAACC,IAAR,mDAAwDzB,OAAxD;QACAH,aAAa,CAAC6B,IAAd,CAAmB1B,OAAnB;MACD;IACF;EACF,CAfD;EAiBA,OAAOgB,MAAP;AACD","names":["shownWarnings","validations","transparentCard","message","compat","c","o","cardStyle","backgroundColor","headerLayoutPreset","headerTitleAlign","headerTransitionPreset","transitionConfig","reduce","acc","name","validateDeprecatedConfig","config","options","result","Object","keys","forEach","process","env","NODE_ENV","includes","console","warn","push"],"sources":["validateDeprecatedConfig.tsx"],"sourcesContent":["import type { StyleProp, ViewStyle } from 'react-native';\nimport type {\n  StackNavigationOptions,\n  StackNavigationConfig,\n} from '../vendor/types';\n\ntype Validation = {\n  message: string;\n  compat?: (\n    c: Record<string, any>,\n    o: StackNavigationOptions\n  ) => StackNavigationOptions;\n};\n\nconst shownWarnings: string[] = [];\n\nconst validations: Record<string, Validation> = {\n  transparentCard: {\n    message: `'transparentCard' is removed in favor of 'cardStyle: { backgroundColor: 'transparent' }' in 'navigationOptions'. Specify it in 'defaultNavigationOptions' to keep the same behaviour.`,\n    compat: (c, o) =>\n      c.transparentCard\n        ? {\n            ...o,\n            cardStyle: [\n              { backgroundColor: 'transparent' },\n              o.cardStyle,\n            ] as StyleProp<ViewStyle>,\n          }\n        : o,\n  },\n  headerLayoutPreset: {\n    message: `'headerLayoutPreset' is renamed to 'headerTitleAlign' and moved to 'navigationOptions'. Specify it in 'defaultNavigationOptions' to keep the same behaviour.`,\n    compat: (c, o) => ({ ...o, headerTitleAlign: c.headerLayoutPreset }),\n  },\n  headerTransitionPreset: {\n    message: `'headerTransitionPreset' is removed in favor of the new animation APIs`,\n  },\n  transitionConfig: {\n    message: `'transitionConfig' is removed in favor of the new animation APIs`,\n  },\n  ...[\n    'cardShadowEnabled',\n    'cardOverlayEnabled',\n    'cardStyle',\n    'headerBackTitleVisible',\n    'onTransitionStart',\n    'onTransitionEnd',\n  ].reduce<Record<string, Validation>>((acc, name) => {\n    acc[name] = {\n      message: `'${name}' is moved to 'navigationOptions'. Specify it in 'defaultNavigationOptions' to keep the same behaviour.`,\n      compat: (c, o) => ({ ...o, [name]: () => c[name] }),\n    };\n\n    return acc;\n  }, {}),\n};\n\nexport default function validateDeprecatedConfig(\n  config: StackNavigationConfig,\n  options: StackNavigationOptions\n) {\n  let result = options;\n\n  Object.keys(validations).forEach((name) => {\n    if (name in config) {\n      const { compat, message } = validations[name];\n\n      result = compat ? compat(config, result) : result;\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (shownWarnings.includes(message)) {\n          return;\n        }\n\n        console.warn(`Deprecation in 'createStackNavigator':\\n${message}`);\n        shownWarnings.push(message);\n      }\n    }\n  });\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}