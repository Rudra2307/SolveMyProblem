{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { Platform } from 'expo-modules-core';\nexport var userMediaRequested = false;\nexport var mountedInstances = [];\n\nfunction requestLegacyUserMediaAsync(_x) {\n  return _requestLegacyUserMediaAsync.apply(this, arguments);\n}\n\nfunction _requestLegacyUserMediaAsync() {\n  _requestLegacyUserMediaAsync = _asyncToGenerator(function* (props) {\n    var optionalSource = function optionalSource(id) {\n      return {\n        optional: [{\n          sourceId: id\n        }]\n      };\n    };\n\n    var constraintToSourceId = function constraintToSourceId(constraint) {\n      var deviceId = constraint.deviceId;\n\n      if (typeof deviceId === 'string') {\n        return deviceId;\n      }\n\n      if (Array.isArray(deviceId) && deviceId.length > 0) {\n        return deviceId[0];\n      }\n\n      if (typeof deviceId === 'object' && deviceId.ideal) {\n        return deviceId.ideal;\n      }\n\n      return null;\n    };\n\n    var sources = yield new Promise(function (resolve) {\n      return MediaStreamTrack.getSources(function (sources) {\n        return resolve(sources);\n      });\n    });\n    var audioSource = null;\n    var videoSource = null;\n    sources.forEach(function (source) {\n      if (source.kind === 'audio') {\n        audioSource = source.id;\n      } else if (source.kind === 'video') {\n        videoSource = source.id;\n      }\n    });\n    var audioSourceId = constraintToSourceId(props.audioConstraints);\n\n    if (audioSourceId) {\n      audioSource = audioSourceId;\n    }\n\n    var videoSourceId = constraintToSourceId(props.videoConstraints);\n\n    if (videoSourceId) {\n      videoSource = videoSourceId;\n    }\n\n    return [optionalSource(audioSource), optionalSource(videoSource)];\n  });\n  return _requestLegacyUserMediaAsync.apply(this, arguments);\n}\n\nfunction sourceSelectedAsync(_x2, _x3, _x4) {\n  return _sourceSelectedAsync.apply(this, arguments);\n}\n\nfunction _sourceSelectedAsync() {\n  _sourceSelectedAsync = _asyncToGenerator(function* (isMuted, audioConstraints, videoConstraints) {\n    var constraints = {\n      video: typeof videoConstraints !== 'undefined' ? videoConstraints : true\n    };\n\n    if (!isMuted) {\n      constraints.audio = typeof audioConstraints !== 'undefined' ? audioConstraints : true;\n    }\n\n    return yield getAnyUserMediaAsync(constraints);\n  });\n  return _sourceSelectedAsync.apply(this, arguments);\n}\n\nexport function requestUserMediaAsync(_x5) {\n  return _requestUserMediaAsync.apply(this, arguments);\n}\n\nfunction _requestUserMediaAsync() {\n  _requestUserMediaAsync = _asyncToGenerator(function* (props) {\n    var isMuted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (canGetUserMedia()) {\n      return yield sourceSelectedAsync(isMuted, props.audio, props.video);\n    }\n\n    var _yield$requestLegacyU = yield requestLegacyUserMediaAsync(props),\n        _yield$requestLegacyU2 = _slicedToArray(_yield$requestLegacyU, 2),\n        audio = _yield$requestLegacyU2[0],\n        video = _yield$requestLegacyU2[1];\n\n    return yield sourceSelectedAsync(isMuted, audio, video);\n  });\n  return _requestUserMediaAsync.apply(this, arguments);\n}\n\nexport function getAnyUserMediaAsync(_x6) {\n  return _getAnyUserMediaAsync.apply(this, arguments);\n}\n\nfunction _getAnyUserMediaAsync() {\n  _getAnyUserMediaAsync = _asyncToGenerator(function* (constraints) {\n    var ignoreConstraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    try {\n      return yield getUserMediaAsync(_objectSpread(_objectSpread({}, constraints), {}, {\n        video: ignoreConstraints || constraints.video\n      }));\n    } catch (error) {\n      if (!ignoreConstraints && error.name === 'ConstraintNotSatisfiedError') {\n        return yield getAnyUserMediaAsync(constraints, true);\n      }\n\n      throw error;\n    }\n  });\n  return _getAnyUserMediaAsync.apply(this, arguments);\n}\n\nexport function getUserMediaAsync(_x7) {\n  return _getUserMediaAsync.apply(this, arguments);\n}\n\nfunction _getUserMediaAsync() {\n  _getUserMediaAsync = _asyncToGenerator(function* (constraints) {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      return navigator.mediaDevices.getUserMedia(constraints);\n    }\n\n    var _getUserMedia = navigator['mozGetUserMedia'] || navigator['webkitGetUserMedia'] || navigator['msGetUserMedia'];\n\n    return new Promise(function (resolve, reject) {\n      return _getUserMedia.call(navigator, constraints, resolve, reject);\n    });\n  });\n  return _getUserMediaAsync.apply(this, arguments);\n}\n\nexport function canGetUserMedia() {\n  return Platform.isDOMAvailable && !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia || navigator['mozGetUserMedia'] || navigator['webkitGetUserMedia'] || navigator['msGetUserMedia']);\n}\nexport function isFrontCameraAvailableAsync(_x8) {\n  return _isFrontCameraAvailableAsync.apply(this, arguments);\n}\n\nfunction _isFrontCameraAvailableAsync() {\n  _isFrontCameraAvailableAsync = _asyncToGenerator(function* (devices) {\n    return yield supportsCameraType(['front', 'user', 'facetime'], 'user', devices);\n  });\n  return _isFrontCameraAvailableAsync.apply(this, arguments);\n}\n\nexport function isBackCameraAvailableAsync(_x9) {\n  return _isBackCameraAvailableAsync.apply(this, arguments);\n}\n\nfunction _isBackCameraAvailableAsync() {\n  _isBackCameraAvailableAsync = _asyncToGenerator(function* (devices) {\n    return yield supportsCameraType(['back', 'rear'], 'environment', devices);\n  });\n  return _isBackCameraAvailableAsync.apply(this, arguments);\n}\n\nfunction supportsCameraType(_x10, _x11, _x12) {\n  return _supportsCameraType.apply(this, arguments);\n}\n\nfunction _supportsCameraType() {\n  _supportsCameraType = _asyncToGenerator(function* (labels, type, devices) {\n    if (!devices) {\n      if (!navigator.mediaDevices.enumerateDevices) {\n        return null;\n      }\n\n      devices = yield navigator.mediaDevices.enumerateDevices();\n    }\n\n    var cameras = devices.filter(function (t) {\n      return t.kind === 'videoinput';\n    });\n\n    var _cameras$filter = cameras.filter(function (camera) {\n      return labels.some(function (label) {\n        return camera.label.toLowerCase().includes(label);\n      });\n    }),\n        _cameras$filter2 = _slicedToArray(_cameras$filter, 1),\n        hasCamera = _cameras$filter2[0];\n\n    var _cameras$filter3 = cameras.filter(function (camera) {\n      if (!('getCapabilities' in camera)) {\n        return null;\n      }\n\n      var capabilities = camera.getCapabilities();\n\n      if (!capabilities.facingMode) {\n        return null;\n      }\n\n      return capabilities.facingMode.find(function (_) {\n        return type;\n      });\n    }),\n        _cameras$filter4 = _slicedToArray(_cameras$filter3, 1),\n        isCapable = _cameras$filter4[0];\n\n    return (isCapable == null ? void 0 : isCapable.deviceId) || (hasCamera == null ? void 0 : hasCamera.deviceId) || null;\n  });\n  return _supportsCameraType.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/WebUserMediaManager.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-env browser */\n/**\n * A web-only module for ponyfilling the UserMedia API.\n */\nimport { Platform } from 'expo-modules-core';\n\nexport const userMediaRequested: boolean = false;\n\nexport const mountedInstances: any[] = [];\n\nasync function requestLegacyUserMediaAsync(props): Promise<any[]> {\n  const optionalSource = (id) => ({ optional: [{ sourceId: id }] });\n\n  const constraintToSourceId = (constraint) => {\n    const { deviceId } = constraint;\n\n    if (typeof deviceId === 'string') {\n      return deviceId;\n    }\n\n    if (Array.isArray(deviceId) && deviceId.length > 0) {\n      return deviceId[0];\n    }\n\n    if (typeof deviceId === 'object' && deviceId.ideal) {\n      return deviceId.ideal;\n    }\n\n    return null;\n  };\n\n  const sources: any[] = await new Promise((resolve) =>\n    // @ts-ignore: https://caniuse.com/#search=getSources Chrome for Android (78) & Samsung Internet (10.1) use this\n    MediaStreamTrack.getSources((sources) => resolve(sources))\n  );\n\n  let audioSource = null;\n  let videoSource = null;\n\n  sources.forEach((source) => {\n    if (source.kind === 'audio') {\n      audioSource = source.id;\n    } else if (source.kind === 'video') {\n      videoSource = source.id;\n    }\n  });\n\n  const audioSourceId = constraintToSourceId(props.audioConstraints);\n  if (audioSourceId) {\n    audioSource = audioSourceId;\n  }\n\n  const videoSourceId = constraintToSourceId(props.videoConstraints);\n  if (videoSourceId) {\n    videoSource = videoSourceId;\n  }\n\n  return [optionalSource(audioSource), optionalSource(videoSource)];\n}\n\nasync function sourceSelectedAsync(\n  isMuted: boolean,\n  audioConstraints?: MediaTrackConstraints | boolean,\n  videoConstraints?: MediaTrackConstraints | boolean\n): Promise<MediaStream> {\n  const constraints: MediaStreamConstraints = {\n    video: typeof videoConstraints !== 'undefined' ? videoConstraints : true,\n  };\n\n  if (!isMuted) {\n    constraints.audio = typeof audioConstraints !== 'undefined' ? audioConstraints : true;\n  }\n\n  return await getAnyUserMediaAsync(constraints);\n}\n\nexport async function requestUserMediaAsync(\n  props: { audio?: any; video?: any },\n  isMuted: boolean = true\n): Promise<MediaStream> {\n  if (canGetUserMedia()) {\n    return await sourceSelectedAsync(isMuted, props.audio, props.video);\n  }\n  const [audio, video] = await requestLegacyUserMediaAsync(props);\n  return await sourceSelectedAsync(isMuted, audio, video);\n}\n\nexport async function getAnyUserMediaAsync(\n  constraints: MediaStreamConstraints,\n  ignoreConstraints: boolean = false\n): Promise<MediaStream> {\n  try {\n    return await getUserMediaAsync({\n      ...constraints,\n      video: ignoreConstraints || constraints.video,\n    });\n  } catch (error) {\n    if (!ignoreConstraints && error.name === 'ConstraintNotSatisfiedError') {\n      return await getAnyUserMediaAsync(constraints, true);\n    }\n    throw error;\n  }\n}\n\nexport async function getUserMediaAsync(constraints: MediaStreamConstraints): Promise<MediaStream> {\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    return navigator.mediaDevices.getUserMedia(constraints);\n  }\n\n  const _getUserMedia =\n    navigator['mozGetUserMedia'] || navigator['webkitGetUserMedia'] || navigator['msGetUserMedia'];\n  return new Promise((resolve, reject) =>\n    _getUserMedia.call(navigator, constraints, resolve, reject)\n  );\n}\n\nexport function canGetUserMedia(): boolean {\n  return (\n    // SSR\n    Platform.isDOMAvailable &&\n    // Has any form of media API\n    !!(\n      (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) ||\n      navigator['mozGetUserMedia'] ||\n      navigator['webkitGetUserMedia'] ||\n      navigator['msGetUserMedia']\n    )\n  );\n}\n\nexport async function isFrontCameraAvailableAsync(\n  devices?: MediaDeviceInfo[]\n): Promise<null | string> {\n  return await supportsCameraType(['front', 'user', 'facetime'], 'user', devices);\n}\n\nexport async function isBackCameraAvailableAsync(\n  devices?: MediaDeviceInfo[]\n): Promise<null | string> {\n  return await supportsCameraType(['back', 'rear'], 'environment', devices);\n}\n\nasync function supportsCameraType(\n  labels: string[],\n  type: string,\n  devices?: MediaDeviceInfo[]\n): Promise<null | string> {\n  if (!devices) {\n    if (!navigator.mediaDevices.enumerateDevices) {\n      return null;\n    }\n    devices = await navigator.mediaDevices.enumerateDevices();\n  }\n  const cameras = devices.filter((t) => t.kind === 'videoinput');\n  const [hasCamera] = cameras.filter((camera) =>\n    labels.some((label) => camera.label.toLowerCase().includes(label))\n  );\n  const [isCapable] = cameras.filter((camera) => {\n    if (!('getCapabilities' in camera)) {\n      return null;\n    }\n\n    const capabilities = (camera as any).getCapabilities();\n    if (!capabilities.facingMode) {\n      return null;\n    }\n\n    return capabilities.facingMode.find((_: string) => type);\n  });\n\n  return isCapable?.deviceId || hasCamera?.deviceId || null;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}