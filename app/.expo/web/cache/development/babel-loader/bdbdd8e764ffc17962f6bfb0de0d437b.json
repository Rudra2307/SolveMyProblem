{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar _excluded = [\"locale\", \"locales\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport ExpoLocalization from \"./ExpoLocalization\";\n\nvar parseLocale = function parseLocale(locale) {\n  return locale.replace('_', '-');\n};\n\nexport var locale = parseLocale(ExpoLocalization.locale);\nexport var locales = ExpoLocalization.locales.map(parseLocale);\nexport var timezone = ExpoLocalization.timezone;\nexport var isoCurrencyCodes = ExpoLocalization.isoCurrencyCodes;\nexport var region = ExpoLocalization.region;\nexport var isRTL = ExpoLocalization.isRTL;\nexport function getLocalizationAsync() {\n  return _getLocalizationAsync.apply(this, arguments);\n}\n\nfunction _getLocalizationAsync() {\n  _getLocalizationAsync = _asyncToGenerator(function* () {\n    var _yield$ExpoLocalizati = yield ExpoLocalization.getLocalizationAsync(),\n        locale = _yield$ExpoLocalizati.locale,\n        locales = _yield$ExpoLocalizati.locales,\n        localization = _objectWithoutProperties(_yield$ExpoLocalizati, _excluded);\n\n    return _objectSpread({\n      locale: parseLocale(locale),\n      locales: ExpoLocalization.locales.map(parseLocale)\n    }, localization);\n  });\n  return _getLocalizationAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/Localization.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,gBAAP;;AAOA,IAAM,WAAW,GAAG,SAAd,WAAc,CAAC,MAAD;AAAA,SAA4B,MAAM,CAAC,OAAP,CAAe,GAAf,EAAoB,GAApB,CAA5B;AAAA,CAApB;;AAEA,OAAO,IAAM,MAAM,GAAG,WAAW,CAAC,gBAAgB,CAAC,MAAlB,CAA1B;AACP,OAAO,IAAM,OAAO,GAAG,gBAAgB,CAAC,OAAjB,CAAyB,GAAzB,CAA6B,WAA7B,CAAhB;AACP,OAAO,IAAM,QAAQ,GAAG,gBAAgB,CAAC,QAAlC;AACP,OAAO,IAAM,gBAAgB,GAAG,gBAAgB,CAAC,gBAA1C;AACP,OAAO,IAAM,MAAM,GAAG,gBAAgB,CAAC,MAAhC;AACP,OAAO,IAAM,KAAK,GAAG,gBAAgB,CAAC,KAA/B;AAEP,gBAAsB,oBAAtB;AAAA;AAAA;;;4CAAO,aAAmC;AACxC,sCAAmD,gBAAgB,CAAC,oBAAjB,EAAnD;AAAA,QAAQ,MAAR,yBAAQ,MAAR;AAAA,QAAgB,OAAhB,yBAAgB,OAAhB;AAAA,QAA4B,YAA5B;;AACA;AACE,MAAA,MAAM,EAAE,WAAW,CAAC,MAAD,CADrB;AAEE,MAAA,OAAO,EAAE,gBAAgB,CAAC,OAAjB,CAAyB,GAAzB,CAA6B,WAA7B;AAFX,OAGK,YAHL;AAKD,G","sourcesContent":["import ExpoLocalization from './ExpoLocalization';\nimport { Localization } from './Localization.types';\n\nexport { Localization };\n\n// Web, Android, and some iOS values use `-`. This will convert the iOS values that use `_`\n// https://github.com/expo/expo/blob/21ae94bae2e8369992050c433a00699d425b35bd/packages/expo/src/Localization.ts#L112-L114\nconst parseLocale = (locale: string): string => locale.replace('_', '-');\n\nexport const locale = parseLocale(ExpoLocalization.locale);\nexport const locales = ExpoLocalization.locales.map(parseLocale);\nexport const timezone = ExpoLocalization.timezone;\nexport const isoCurrencyCodes = ExpoLocalization.isoCurrencyCodes;\nexport const region = ExpoLocalization.region; // iOS, Web\nexport const isRTL = ExpoLocalization.isRTL;\n\nexport async function getLocalizationAsync(): Promise<Localization> {\n  const { locale, locales, ...localization } = await ExpoLocalization.getLocalizationAsync();\n  return {\n    locale: parseLocale(locale),\n    locales: ExpoLocalization.locales.map(parseLocale),\n    ...localization,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}