{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport * as rtlDetect from 'rtl-detect';\nexport default {\n  get isRTL() {\n    return rtlDetect.isRtlLang(this.locale);\n  },\n\n  get locale() {\n    var locale = navigator.language || navigator['systemLanguage'] || navigator['browserLanguage'] || navigator['userLanguage'] || this.locales[0];\n    return locale;\n  },\n\n  get locales() {\n    var _navigator = navigator,\n        _navigator$languages = _navigator.languages,\n        languages = _navigator$languages === void 0 ? [] : _navigator$languages;\n    return Array.from(languages);\n  },\n\n  get timezone() {\n    var defaultTimeZone = 'Etc/UTC';\n\n    if (typeof Intl === 'undefined') {\n      return defaultTimeZone;\n    }\n\n    return Intl.DateTimeFormat().resolvedOptions().timeZone || defaultTimeZone;\n  },\n\n  get isoCurrencyCodes() {\n    return [];\n  },\n\n  get region() {\n    var locale = this.locale;\n\n    if (typeof locale === 'string' && locale.length) {\n      var isoCountryCode = locale.substring(locale.lastIndexOf('-') + 1);\n      return isoCountryCode.toUpperCase();\n    }\n\n    return undefined;\n  },\n\n  getLocalizationAsync: function () {\n    var _getLocalizationAsync = _asyncToGenerator(function* () {\n      var region = this.region,\n          isoCurrencyCodes = this.isoCurrencyCodes,\n          timezone = this.timezone,\n          locales = this.locales,\n          locale = this.locale,\n          isRTL = this.isRTL;\n      return {\n        region: region,\n        isoCurrencyCodes: isoCurrencyCodes,\n        timezone: timezone,\n        locales: locales,\n        locale: locale,\n        isRTL: isRTL\n      };\n    });\n\n    function getLocalizationAsync() {\n      return _getLocalizationAsync.apply(this, arguments);\n    }\n\n    return getLocalizationAsync;\n  }()\n};","map":{"version":3,"sources":["../src/ExpoLocalization.web.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,SAAZ,MAA2B,YAA3B;AAIA,eAAe;AACb,MAAI,KAAJ,GAAS;AACP,WAAO,SAAS,CAAC,SAAV,CAAoB,KAAK,MAAzB,CAAP;AACD,GAHY;;AAIb,MAAI,MAAJ,GAAU;AACR,QAAM,MAAM,GACV,SAAS,CAAC,QAAV,IACA,SAAS,CAAC,gBAAD,CADT,IAEA,SAAS,CAAC,iBAAD,CAFT,IAGA,SAAS,CAAC,cAAD,CAHT,IAIA,KAAK,OAAL,CAAa,CAAb,CALF;AAMA,WAAO,MAAP;AACD,GAZY;;AAab,MAAI,OAAJ,GAAW;AACT,qBAA2B,SAA3B;AAAA,0CAAQ,SAAR;AAAA,QAAQ,SAAR,qCAAoB,EAApB;AACA,WAAO,KAAK,CAAC,IAAN,CAAW,SAAX,CAAP;AACD,GAhBY;;AAiBb,MAAI,QAAJ,GAAY;AACV,QAAM,eAAe,GAAG,SAAxB;;AACA,QAAI,OAAO,IAAP,KAAgB,WAApB,EAAiC;AAC/B,aAAO,eAAP;AACD;;AACD,WAAO,IAAI,CAAC,cAAL,GAAsB,eAAtB,GAAwC,QAAxC,IAAoD,eAA3D;AACD,GAvBY;;AAwBb,MAAI,gBAAJ,GAAoB;AAElB,WAAO,EAAP;AACD,GA3BY;;AA4Bb,MAAI,MAAJ,GAAU;AACR,QAAQ,MAAR,GAAmB,IAAnB,CAAQ,MAAR;;AACA,QAAI,OAAO,MAAP,KAAkB,QAAlB,IAA8B,MAAM,CAAC,MAAzC,EAAiD;AAC/C,UAAM,cAAc,GAAG,MAAM,CAAC,SAAP,CAAiB,MAAM,CAAC,WAAP,CAAmB,GAAnB,IAA0B,CAA3C,CAAvB;AACA,aAAO,cAAc,CAAC,WAAf,EAAP;AACD;;AACD,WAAO,SAAP;AACD,GAnCY;;AAoCP,EAAA,oBApCO;AAAA,+DAoCa;AACxB,UAAQ,MAAR,GAAuE,IAAvE,CAAQ,MAAR;AAAA,UAAgB,gBAAhB,GAAuE,IAAvE,CAAgB,gBAAhB;AAAA,UAAkC,QAAlC,GAAuE,IAAvE,CAAkC,QAAlC;AAAA,UAA4C,OAA5C,GAAuE,IAAvE,CAA4C,OAA5C;AAAA,UAAqD,MAArD,GAAuE,IAAvE,CAAqD,MAArD;AAAA,UAA6D,KAA7D,GAAuE,IAAvE,CAA6D,KAA7D;AACA,aAAO;AACL,QAAA,MAAM,EAAN,MADK;AAEL,QAAA,gBAAgB,EAAhB,gBAFK;AAGL,QAAA,QAAQ,EAAR,QAHK;AAIL,QAAA,OAAO,EAAP,OAJK;AAKL,QAAA,MAAM,EAAN,MALK;AAML,QAAA,KAAK,EAAL;AANK,OAAP;AAQD,KA9CY;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAf","sourcesContent":["import * as rtlDetect from 'rtl-detect';\n\nimport { Localization } from './Localization.types';\n\nexport default {\n  get isRTL(): boolean {\n    return rtlDetect.isRtlLang(this.locale);\n  },\n  get locale(): string {\n    const locale =\n      navigator.language ||\n      navigator['systemLanguage'] ||\n      navigator['browserLanguage'] ||\n      navigator['userLanguage'] ||\n      this.locales[0];\n    return locale;\n  },\n  get locales(): string[] {\n    const { languages = [] } = navigator;\n    return Array.from(languages);\n  },\n  get timezone(): string {\n    const defaultTimeZone = 'Etc/UTC';\n    if (typeof Intl === 'undefined') {\n      return defaultTimeZone;\n    }\n    return Intl.DateTimeFormat().resolvedOptions().timeZone || defaultTimeZone;\n  },\n  get isoCurrencyCodes(): string[] {\n    // TODO: Bacon: Add this - very low priority\n    return [];\n  },\n  get region(): string | undefined {\n    const { locale } = this;\n    if (typeof locale === 'string' && locale.length) {\n      const isoCountryCode = locale.substring(locale.lastIndexOf('-') + 1);\n      return isoCountryCode.toUpperCase();\n    }\n    return undefined;\n  },\n  async getLocalizationAsync(): Promise<Localization> {\n    const { region, isoCurrencyCodes, timezone, locales, locale, isRTL } = this;\n    return {\n      region,\n      isoCurrencyCodes,\n      timezone,\n      locales,\n      locale,\n      isRTL,\n    };\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}