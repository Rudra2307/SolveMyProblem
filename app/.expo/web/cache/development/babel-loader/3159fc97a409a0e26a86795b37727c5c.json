{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { useEffect } from 'react';\nimport ExpoKeepAwake from \"./ExpoKeepAwake\";\nexport var ExpoKeepAwakeTag = 'ExpoKeepAwakeDefaultTag';\nexport function useKeepAwake() {\n  var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ExpoKeepAwakeTag;\n  var options = arguments.length > 1 ? arguments[1] : undefined;\n  useEffect(function () {\n    activateKeepAwake(tag);\n    return function () {\n      if (options != null && options.suppressDeactivateWarnings) {\n        deactivateKeepAwake(tag).catch(function () {});\n      } else {\n        deactivateKeepAwake(tag);\n      }\n    };\n  }, [tag]);\n}\nexport function activateKeepAwake() {\n  return _activateKeepAwake.apply(this, arguments);\n}\n\nfunction _activateKeepAwake() {\n  _activateKeepAwake = _asyncToGenerator(function* () {\n    var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ExpoKeepAwakeTag;\n    yield ExpoKeepAwake.activate == null ? void 0 : ExpoKeepAwake.activate(tag);\n  });\n  return _activateKeepAwake.apply(this, arguments);\n}\n\nexport function deactivateKeepAwake() {\n  return _deactivateKeepAwake.apply(this, arguments);\n}\n\nfunction _deactivateKeepAwake() {\n  _deactivateKeepAwake = _asyncToGenerator(function* () {\n    var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ExpoKeepAwakeTag;\n    yield ExpoKeepAwake.deactivate == null ? void 0 : ExpoKeepAwake.deactivate(tag);\n  });\n  return _deactivateKeepAwake.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";AAAA,SAAS,SAAT,QAA0B,OAA1B;AAEA,OAAO,aAAP;AAEA,OAAO,IAAM,gBAAgB,GAAG,yBAAzB;AAgBP,OAAM,SAAU,YAAV,GAIH;AAAA,MAHD,GAGC,uEAHa,gBAGb;AAAA,MAFD,OAEC;AAED,EAAA,SAAS,CAAC,YAAK;AACb,IAAA,iBAAiB,CAAC,GAAD,CAAjB;AACA,WAAO,YAAK;AACV,UAAI,OAAJ,YAAI,OAAO,CAAE,0BAAb,EAAyC;AACvC,QAAA,mBAAmB,CAAC,GAAD,CAAnB,CAAyB,KAAzB,CAA+B,YAAK,CAAG,CAAvC;AACD,OAFD,MAEO;AACL,QAAA,mBAAmB,CAAC,GAAD,CAAnB;AACD;AACF,KAND;AAOD,GATQ,EASN,CAAC,GAAD,CATM,CAAT;AAUD;AAYD,gBAAsB,iBAAtB;AAAA;AAAA;;;yCAAO,aAA+D;AAAA,QAA9B,GAA8B,uEAAhB,gBAAgB;AACpE,UAAM,aAAa,CAAC,QAApB,oBAAM,aAAa,CAAC,QAAd,CAAyB,GAAzB,CAAN;AACD,G;;;;AASD,gBAAsB,mBAAtB;AAAA;AAAA;;;2CAAO,aAAiE;AAAA,QAA9B,GAA8B,uEAAhB,gBAAgB;AACtE,UAAM,aAAa,CAAC,UAApB,oBAAM,aAAa,CAAC,UAAd,CAA2B,GAA3B,CAAN;AACD,G","sourcesContent":["import { useEffect } from 'react';\n\nimport ExpoKeepAwake from './ExpoKeepAwake';\n\nexport const ExpoKeepAwakeTag = 'ExpoKeepAwakeDefaultTag';\n\n// @needsAudit\n/**\n * A React hook to keep the screen awake for as long as the owner component is mounted.\n * The optionally provided `tag` argument is used when activating and deactivating the keep-awake\n * feature. If unspecified, the default `tag` is used. See the documentation for `activateKeepAwake`\n * below to learn more about the `tag` argument.\n *\n * @param tag *Optional* - Tag to lock screen sleep prevention. If not provided, the default tag is used.\n * @param options *Optional*\n *   - `suppressDeactivateWarnings` *Optional* -\n *      The call will throw an unhandled promise rejection on Android\n *      when the original Activity is dead or deactivated.\n *      Set the value to true for suppressing the uncaught exception.\n */\nexport function useKeepAwake(\n  tag: string = ExpoKeepAwakeTag,\n  options?: {\n    suppressDeactivateWarnings: boolean;\n  }\n): void {\n  useEffect(() => {\n    activateKeepAwake(tag);\n    return () => {\n      if (options?.suppressDeactivateWarnings) {\n        deactivateKeepAwake(tag).catch(() => {});\n      } else {\n        deactivateKeepAwake(tag);\n      }\n    };\n  }, [tag]);\n}\n\n// @needsAudit\n/**\n * Prevents the screen from sleeping until `deactivateKeepAwake` is called with the same `tag` value.\n *\n * If the `tag` argument is specified, the screen will not sleep until you call `deactivateKeepAwake`\n * with the same `tag` argument. When using multiple `tags` for activation you'll have to deactivate\n * each one in order to re-enable screen sleep. If tag is unspecified, the default `tag` is used.\n * @param tag *Optional* - Tag to lock screen sleep prevention. If not provided, the default tag is used.\n */\n\nexport async function activateKeepAwake(tag: string = ExpoKeepAwakeTag): Promise<void> {\n  await ExpoKeepAwake.activate?.(tag);\n}\n\n// @needsAudit\n/**\n * Releases the lock on screen-sleep prevention associated with the given `tag` value. If `tag`\n * is unspecified, it defaults to the same default tag that `activateKeepAwake` uses.\n * @param tag *Optional* - Tag to release the lock on screen sleep prevention. If not provided,\n * the default tag is used.\n */\nexport async function deactivateKeepAwake(tag: string = ExpoKeepAwakeTag): Promise<void> {\n  await ExpoKeepAwake.deactivate?.(tag);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}