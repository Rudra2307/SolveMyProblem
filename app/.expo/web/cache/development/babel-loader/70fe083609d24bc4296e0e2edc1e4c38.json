{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getContainerStyle = exports.generateBackgroundStyle = exports.fetchImage = exports.sumChars = exports.abbr = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _initials = _interopRequireDefault(require(\"initials\"));\nvar abbr = function abbr(name) {\n  var abbr = (0, _initials.default)(name);\n  if (name.startsWith('+')) {\n    abbr = \"+\".concat(abbr);\n  }\n  if (!abbr) {\n    console.warn('Could not get abbr from name');\n    abbr = name;\n  }\n  return abbr;\n};\nexports.abbr = abbr;\nvar sumChars = function sumChars(str) {\n  var sum = 0;\n  for (var i = 0; i < str.length; i++) {\n    sum += str.charCodeAt(i);\n  }\n  return sum;\n};\nexports.sumChars = sumChars;\nvar fetchImage = function fetchImage(src) {\n  var fetchCall;\n  return _regenerator.default.async(function fetchImage$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regenerator.default.awrap(fetch(src));\n        case 3:\n          fetchCall = _context.sent;\n          if (!fetchCall.headers.map['content-type'].startsWith('image/')) {\n            _context.next = 8;\n            break;\n          }\n          return _context.abrupt(\"return\", true);\n        case 8:\n          console.warn('Online fetched source is not a supported image');\n          return _context.abrupt(\"return\", false);\n        case 10:\n          _context.next = 16;\n          break;\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          console.warn('Error fetching source, falling back to initials', _context.t0);\n          return _context.abrupt(\"return\", false);\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 12]], Promise);\n};\nexports.fetchImage = fetchImage;\nvar generateBackgroundStyle = function generateBackgroundStyle(name, bgColor, bgColors) {\n  var background;\n  if (bgColor) {\n    background = bgColor;\n  } else {\n    var i = sumChars(name) % bgColors.length;\n    background = bgColors[i];\n  }\n  return {\n    backgroundColor: background\n  };\n};\nexports.generateBackgroundStyle = generateBackgroundStyle;\nvar getContainerStyle = function getContainerStyle(size, src, borderRadius) {\n  return {\n    borderRadius: borderRadius ? borderRadius : size * 0.5,\n    borderWidth: src ? 0 : 1,\n    borderColor: 'transparent',\n    justifyContent: 'center',\n    alignItems: 'center'\n  };\n};\nexports.getContainerStyle = getContainerStyle;","map":{"version":3,"mappings":";;;;;;AAAA;AAEO,IAAMA,IAAI,GAAG,cAACC,IAAD,EAAU;EAC5B,IAAID,IAAI,GAAG,uBAASC,IAAT,CAAX;EACA,IAAIA,IAAI,CAACC,UAAL,CAAgB,GAAhB,CAAJ,EAA0B;IACxBF,IAAI,cAAQA,IAAR,CAAJ;EACD;EACD,IAAI,CAACA,IAAL,EAAW;IACTG,OAAO,CAACC,IAAR,CAAa,8BAAb;IACAJ,IAAI,GAAGC,IAAP;EACD;EACD,OAAOD,IAAP;AACD,CAVM;;AAYA,IAAMK,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAS;EAC/B,IAAIC,GAAG,GAAG,CAAV;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;IACnCD,GAAG,IAAID,GAAG,CAACI,UAAJ,CAAeF,CAAf,CAAP;EACD;EAED,OAAOD,GAAP;AACD,CAPM;;AASA,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAAOC,GAAP;EAAA;EAAA;IAAA;MAAA;QAAA;UAAAC;UAAAA;UAAA,kCAEEC,KAAK,CAACF,GAAD,CAFP;QAAA;UAEhBG,SAFgB;UAAA,KAGlBA,SAAS,CAACC,OAAV,CAAkBC,GAAlB,CAAsB,cAAtB,EAAsCf,UAAtC,CAAiD,QAAjD,CAHkB;YAAAW;YAAA;UAAA;UAAA,iCAIb,IAJa;QAAA;UAMpBV,OAAO,CAACC,IAAR,CAAa,gDAAb;UANoB,iCAOb,KAPa;QAAA;UAAAS;UAAA;QAAA;UAAAA;UAAAA;UAUtBV,OAAO,CAACC,IAAR,CAAa,iDAAb;UAVsB,iCAWf,KAXe;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAAnB;;AAeA,IAAMc,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACjB,IAAD,EAAOkB,OAAP,EAAgBC,QAAhB,EAA6B;EAClE,IAAIC,UAAJ;EACA,IAAIF,OAAJ,EAAa;IACXE,UAAU,GAAGF,OAAb;EACD,CAFD,MAEO;IAEL,IAAMX,CAAC,GAAGH,QAAQ,CAACJ,IAAD,CAAR,GAAiBmB,QAAQ,CAACX,MAApC;IACAY,UAAU,GAAGD,QAAQ,CAACZ,CAAD,CAArB;EACD;EACD,OAAO;IAACc,eAAe,EAAED;EAAlB,CAAP;AACD,CAVM;;AAYA,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,IAAD,EAAOZ,GAAP,EAAYa,YAAZ,EAA6B;EAC5D,OAAO;IACLA,YAAY,EAAEA,YAAY,GAAGA,YAAH,GAAmBD,IAAI,GAAG,GAD/C;IAELE,WAAW,EAAEd,GAAG,GAAG,CAAH,GAAO,CAFlB;IAGLe,WAAW,EAAE,aAHR;IAILC,cAAc,EAAE,QAJX;IAKLC,UAAU,EAAE;EALP,CAAP;AAOD,CARM","names":["abbr","name","startsWith","console","warn","sumChars","str","sum","i","length","charCodeAt","fetchImage","src","_context","fetch","fetchCall","headers","map","generateBackgroundStyle","bgColor","bgColors","background","backgroundColor","getContainerStyle","size","borderRadius","borderWidth","borderColor","justifyContent","alignItems"],"sources":["helpers.js"],"sourcesContent":["import initials from 'initials';\n\nexport const abbr = (name) => {\n  let abbr = initials(name);\n  if (name.startsWith('+')) {\n    abbr = `+${ abbr }`;\n  }\n  if (!abbr) {\n    console.warn('Could not get abbr from name');\n    abbr = name;\n  }\n  return abbr;\n};\n\nexport const sumChars = (str) => {\n  let sum = 0;\n  for (let i = 0; i < str.length; i++) {\n    sum += str.charCodeAt(i);\n  }\n\n  return sum;\n};\n\nexport const fetchImage = async (src) => {\n  try {\n    const fetchCall = await fetch(src);\n    if (fetchCall.headers.map['content-type'].startsWith('image/')) {\n      return true;\n    } else {\n      console.warn('Online fetched source is not a supported image');\n      return false;\n    }\n  } catch (err) {\n    console.warn('Error fetching source, falling back to initials', err);\n    return false;\n  }\n};\n\nexport const generateBackgroundStyle = (name, bgColor, bgColors) => {\n  let background;\n  if (bgColor) {\n    background = bgColor;\n  } else {\n    // Pick a deterministic color from the list\n    const i = sumChars(name) % bgColors.length;\n    background = bgColors[i];\n  }\n  return {backgroundColor: background};\n};\n\nexport const getContainerStyle = (size, src, borderRadius) => {\n  return {\n    borderRadius: borderRadius ? borderRadius : (size * 0.5),\n    borderWidth: src ? 0 : 1,\n    borderColor: 'transparent',\n    justifyContent: 'center',\n    alignItems: 'center',\n  };\n};\n"]},"metadata":{},"sourceType":"script"}